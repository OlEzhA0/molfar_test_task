{"version":3,"sources":["helpers/getEvents.ts","store/popupStatus.ts","store/actionTypes.ts","store/loadingStatus.ts","store/loadEvents.ts","store/loaded.ts","store/loadingError.ts","store/currentId.ts","store/actionCreators.ts","store/index.ts","store/actionSelectors.ts","components/EventSmallInfo/EventSmallInfo.tsx","components/EventAboutInfo/EventAboutInfo.tsx","components/EventDetails/EventDetails.tsx","components/LoadSpinner/LoadSpinner.tsx","components/ButtonForDetails/ButtonForDetails.tsx","components/EventCart/EventCart.tsx","App.tsx","index.tsx"],"names":["getEvents","a","fetch","events","json","preparedEvents","reducer","state","action","type","status","id","setLoadingStatus","setCurrentPopupId","rootReducer","combineReducers","popupStatus","popupStatusReducer","isLoading","loadingReducer","eventsReducer","isLoaded","loadedReducer","errorMessage","loagingErrorReducer","currentPopupId","currentPopupIdReducer","store","createStore","applyMiddleware","thunk","getPopupStatus","getEventsDetails","getLoadingStatus","getLoadedStatus","getErrorMessage","getCurrentPopupId","EventSmallInfo","currentInfo","className","src","imageUrl","alt","infoDate","moreInfo","href","link","linkText","EventAboutInfo","about","EventDetails","useState","barStatus","setBarStatus","dispatch","useDispatch","isOpen","useSelector","currentId","find","event","closePopupWindow","onClick","cn","title","calendar","address","LoadSpinner","ButtonForDetails","EventCart","map","key","App","loading","useEffect","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67888e78.chunk.js","sourcesContent":["const EVENTS_URL = \"./api/events.json\";\n\nexport const getEvents = async () => {\n  const events = await fetch(EVENTS_URL);\n  const preparedEvents = await events.json();\n\n  return preparedEvents;\n}","import { AnyAction } from 'redux';\nimport { OPEN_POPUP, CLOSE_POPUP } from './actionTypes';\n\nconst reducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case OPEN_POPUP:\n      return true;\n\n    case CLOSE_POPUP:\n      return false;\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","export const OPEN_POPUP = 'OPEN_POPUP';\nexport const CLOSE_POPUP = 'CLOSE_POPUP';\nexport const LOAD_EVENTS = 'LOAD_EVENTS';\nexport const LOADING_STATUS = 'LOADING_STATUS';\nexport const LOADED_STATUS = 'LOADED_STATUS';\nexport const LOADING_ERROR = 'LOADING_ERROR';\nexport const CURRENT_POPUP_ID = 'CURRENT_POPUP_ID'","import { LOADING_STATUS } from './actionTypes';\nimport { AnyAction } from 'redux';\n\nconst reducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOADING_STATUS:\n      return action.status;\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","import { AnyAction } from 'redux';\nimport { LOAD_EVENTS } from './actionTypes';\n\nconst reducer = (state = [], action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_EVENTS:\n      return action.events;\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","import { LOADED_STATUS } from './actionTypes';\nimport { AnyAction } from 'redux';\n\nconst reducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOADED_STATUS:\n      return action.status;\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","import { AnyAction } from 'redux';\nimport { LOADING_ERROR } from './actionTypes';\n\nconst reducer = (state = '', action: AnyAction) => {\n  switch (action.type) {\n    case LOADING_ERROR:\n      return 'Oops, something went wrong, please, try later'\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","import { AnyAction } from 'redux';\nimport { CURRENT_POPUP_ID } from './actionTypes';\n\nconst reducer = (state = null, action: AnyAction) => {\n  switch (action.type) {\n    case CURRENT_POPUP_ID:\n      return action.id;\n\n    default:\n      return state;\n  };\n};\n\nexport default reducer;","import { OPEN_POPUP, CLOSE_POPUP, LOAD_EVENTS, LOADING_STATUS, LOADED_STATUS, LOADING_ERROR, CURRENT_POPUP_ID } from \"./actionTypes\";\n\nexport const openPopup = () => ({ type: OPEN_POPUP });\nexport const closePopup = () => ({ type: CLOSE_POPUP });\nexport const setEvents = (events: Events[]) => ({ type: LOAD_EVENTS, events });\nexport const setLoadingStatus = (status: boolean) => ({ type: LOADING_STATUS, status });\nexport const setLoadedStatus = (status: boolean) => ({ type: LOADED_STATUS, status });\nexport const setErrorMessage = () => ({ type: LOADING_ERROR });\nexport const setCurrentPopupId = (id: number | null) => ({ type: CURRENT_POPUP_ID, id });","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk'\nimport { Dispatch } from 'react';\nimport { getEvents } from './../helpers/getEvents';\nimport popupStatusReducer from './popupStatus';\nimport loadingReducer from './loadingStatus';\nimport eventsReducer from './loadEvents';\nimport loadedReducer from './loaded';\nimport loagingErrorReducer from './loadingError';\nimport currentPopupIdReducer from './currentId';\n\nimport { setEvents, setLoadingStatus, setLoadedStatus, setErrorMessage } from './actionCreators';\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  popupStatus: popupStatusReducer,\n  isLoading: loadingReducer,\n  events: eventsReducer,\n  isLoaded: loadedReducer,\n  errorMessage: loagingErrorReducer,\n  currentPopupId: currentPopupIdReducer,\n})\n\nexport const loadEvents = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(setLoadingStatus(true));\n\n    try {\n      const data: Events[] = await getEvents();\n      dispatch(setEvents(data));\n      dispatch(setLoadedStatus(true));\n    } catch {\n      dispatch(setErrorMessage());\n    }\n\n    dispatch(setLoadingStatus(false));\n  }\n}\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import { RootState } from \"./index\";\n\nexport const getPopupStatus = (state: RootState) => state.popupStatus;\nexport const getEventsDetails = (state: RootState) => state.events;\nexport const getLoadingStatus = (state: RootState) => state.isLoading;\nexport const getLoadedStatus = (state: RootState) => state.isLoaded;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\nexport const getCurrentPopupId = (state: RootState) => state.currentPopupId;","import React from 'react';\nimport './EventSmallInfo.scss';\n\ninterface Props {\n  currentInfo: ShortInfo,\n}\n\nexport const EventSmallInfo: React.FC<Props> = ({ currentInfo }) => {\n  return (\n    <div className=\"Event__InfoWrapper\">\n      <img\n        src={currentInfo.imageUrl}\n        alt=\"calendar\"\n        className=\"Event__Icons\"\n      />\n\n      <div className=\"Event__CalendarInfo\">\n        <p className=\"Event__Descr\">\n          {currentInfo.infoDate}\n        </p>\n        <p className=\"Event__Descr\">\n          {currentInfo.moreInfo}\n        </p>\n        <a\n          href={currentInfo.link}\n          className=\"Event__Link\"\n        >\n          {currentInfo.linkText}\n        </a>\n      </div>\n    </div>\n  );\n};\n\n","import React from 'react';\nimport './EventAboutInfo.scss';\n\ninterface Props {\n  about: string,\n}\n\nexport const EventAboutInfo: React.FC<Props> = ({ about }) => {\n  return (\n    <div className=\"Event__About\">\n      <p className=\"Event__AboutTitle\">\n        About\n      </p>\n      <p className=\"Event__AboutSnippet\">\n        {about}\n      </p>\n    </div>\n  );\n};\n\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './EventDetails.scss';\nimport './Event.scss';\nimport './Info.scss';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPopupStatus, getCurrentPopupId, getEventsDetails } from '../../store/actionSelectors';\nimport { EventSmallInfo } from '../EventSmallInfo';\nimport { EventAboutInfo } from '../EventAboutInfo';\nimport { setCurrentPopupId, closePopup } from '../../store/actionCreators';\n\nexport const EventDetails = () => {\n  const [barStatus, setBarStatus] = useState(false)\n  const dispatch = useDispatch();\n  const isOpen = useSelector(getPopupStatus);\n  const currentId = useSelector(getCurrentPopupId);\n  const events = useSelector(getEventsDetails);\n  const currentInfo: Events = events.find((event: Events) => event.id === currentId) || events[0];\n\n  const closePopupWindow = () => {\n    dispatch(setCurrentPopupId(null));\n    dispatch(closePopup());\n    setBarStatus(false);\n  }\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <label className=\"CloseButton\">\n            <button\n              className=\"CloseButton__btn\"\n              onClick={() => closePopupWindow()}\n            />\n          </label>\n\n          <label className=\"Event__BackMemorial\">\n            <span className=\"Event__MainText\">\n              <img\n                src=\"images/icons/back.svg\"\n                alt=\"arrow left\"\n                className=\"Event__BackIcon\"\n              />\n            Back to memorial\n          </span>\n            <button\n              className=\"Event__BackMemorial--btn\"\n              onClick={closePopupWindow}\n            />\n          </label>\n        </>\n      )}\n\n      <div className={cn({\n        'Event': true,\n        'EventDetails': true,\n        'EventDetails--open': isOpen,\n      })}>\n        <label className=\"Event__MoreInfoButton\">\n          <span className=\"Event__MainDot\">.</span>\n          <button\n            className=\"Event__MoreInfoButton--btn\"\n            onClick={() => setBarStatus(!barStatus)}\n          />\n        </label>\n\n        <div className={cn({\n          'Info__Container': true,\n          'Info__Container--open': barStatus,\n        })}>\n          <ul className=\"Info__List\">\n            <li className=\"Info__Item\">\n              <img\n                src=\"images/icons/mail.svg\"\n                alt=\"mail\"\n                className=\"Info__Icons\"\n              />\n              <a\n                href=\"https://www.molfar.io/contacts\"\n                className=\"Info__Link\"\n              >\n                Contact owner\n              </a>\n            </li>\n            <li className=\"Info__Item\">\n              <img\n                src=\"images/icons/flag.svg\"\n                alt=\"mail\"\n                className=\"Info__Icons\"\n              />\n              <a\n                href={`https://mail.google.com/mail/u/0/?view=cm&fs=1&tf=1&source=mailto&to=smoothie@molfar.io`}\n                className=\"Info__Link\"\n              >\n                Report this event\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"Event__InfoContainer\">\n          <h2 className=\"Event__Title\">\n            {currentInfo.title}\n          </h2>\n          <div className=\"Event__PlaceAndDescr\">\n            <div className=\"Event__Information\">\n              <EventSmallInfo currentInfo={currentInfo.calendar} />\n              <EventSmallInfo currentInfo={currentInfo.address} />\n            </div>\n            <EventAboutInfo about={currentInfo.about} />\n          </div>\n          <div className=\"Event__ButtonContainer\">\n            <button\n              type='button'\n              className=\"Event__Button\"\n              onClick={closePopupWindow}\n            >\n              <img src=\"images/icons/checkMark.svg\" alt=\"check mark\" className=\"Event__CheckMark\" />\n          Attending\n      </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport './LoadSpinner.scss';\n\nexport const LoadSpinner = () => (\n  <div className=\"SpinnerContainer\">\n    <div className=\"lds-roller\">\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n\n\n","import React from 'react';\nimport './ButtonForDetails.scss';\nimport { useDispatch } from 'react-redux';\nimport { openPopup, setCurrentPopupId } from '../../store/actionCreators';\n\ninterface Props {\n  id: number,\n}\n\nexport const ButtonForDetails: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"ButtonForDetails\">\n      <button\n        type='button'\n        onClick={() => {\n          dispatch(openPopup())\n          dispatch(setCurrentPopupId(id))\n        }}\n        className=\"ButtonForDetails__Button\"\n      >\n        Show details\n      </button>\n    </div>\n  );\n};\n\n","import React from 'react';\nimport './EventCart.scss';\nimport { useSelector } from 'react-redux';\nimport { getEventsDetails } from '../../store/actionSelectors';\nimport { ButtonForDetails } from '../ButtonForDetails';\n\nexport const EventCart = () => {\n  const events: Events[] = useSelector(getEventsDetails);\n\n  return (\n    <>\n      {events.map(event => (\n        <div className=\"EventCart\" key={event.id}>\n          <div className=\"EventCart__Container\" >\n            <p className=\"EventCart__Title\">\n              {event.title}\n            </p>\n            <ButtonForDetails\n              id={event.id}\n            />\n          </div>\n        </div>\n      ))}\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { EventDetails } from './components/EventDetails';\nimport cn from 'classnames';\nimport { getPopupStatus, getLoadingStatus, getLoadedStatus, getErrorMessage } from './store/actionSelectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LoadSpinner } from './components/LoadSpinner';\nimport { loadEvents } from './store';\nimport { EventCart } from './components/EventCart';\n\nfunction App() {\n  const isOpen = useSelector(getPopupStatus);\n  const loading = useSelector(getLoadingStatus);\n  const isLoaded = useSelector(getLoadedStatus);\n  const errorMessage = useSelector(getErrorMessage);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadEvents())\n  }, [dispatch]);\n\n  return (\n    <>\n      {loading && <LoadSpinner />}\n      {!isLoaded && errorMessage && (\n        <p className=\"ErrorText\">\n          {errorMessage}\n        </p>\n      )}\n      {isLoaded && (\n        <>\n          <EventCart />\n          <EventDetails />\n          <div className={cn({\n            'Layout': true,\n            'Layout--shadow': isOpen,\n          })} />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store';\n\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}